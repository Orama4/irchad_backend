generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "windows"]
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

// définition des modèles
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role?
  admin     Admin?
  endUser   EndUser?
  helper    Helper?
  commercial Commercial?
  maintainer Maintainer?
  decider   Decider?
  notifications Notification[]
  userDeviceHistories UserDeviceHistory[]
  envUsers  EnvUser[]
  logs      Log[]
  profile Profile?
}


// profile
model Profile{
    userId Int @unique
    firstname String?
    lastname String?
    phonenumber String?
    address String @db.VarChar(255)
    user User @relation(fields: [userId],references: [id])
}

model Admin {
    id        Int    @id @default(autoincrement())
    userId    Int    @unique
    user      User   @relation(fields: [userId], references: [id])
    role        Role
}

model EndUser{
    id Int      @id @default(autoincrement())
    helperId    Int?
    lastPos     Json?
    user        User   @relation(fields: [userId],references: [id])
    status      String
    userId      Int @unique
    helper      Helper? @relation(fields: [helperId],references: [id])
    devices     Device[]
    helpRequests        HelpRequest[]
    mySales             Sale[]
}


model Helper {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  endUsers EndUser[]
  helpRequests HelpRequest[]
}

model Commercial {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Maintainer {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
  interventions Intervention[]
}


model Decider {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Device{
    id      Int @id @default(autoincrement())
    type    String
    version String  @db.VarChar(255)
    macAdr  String? @db.VarChar(255)
    status  DeviceStatus
    battery     Int         
    lastPos     Json?
    price       Int?
    createdAt   DateTime @default(now())
    userId      Int?
    user        EndUser? @relation(fields: [userId],references: [id])
    sales       Sale[]
    userDeviceHistories     UserDeviceHistory[]
    interventions   Intervention[]
}


model Notification {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}


model UserDeviceHistory {
  id       Int      @id @default(autoincrement())
  deviceId Int
  userId   Int
  useDate  DateTime @default(now())
  device   Device   @relation(fields: [deviceId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Environment {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  address         String   @db.VarChar(255)
  cords           Json
  pathCartographie String  @db.VarChar(255)
  createdAt       DateTime @default(now())
  scale           Int
  zones           Zone[]
  obstacles       Obstacle[]
  envUsers        EnvUser[]
  routes            Itinerary[]
}

model EnvUser {
  id      Int         @id @default(autoincrement())
  userId  Int
  envId   Int
  user    User        @relation(fields: [userId], references: [id])
  environment Environment @relation(fields: [envId], references: [id])
}

model Zone {
  id      Int      @id @default(autoincrement())
  envId   Int
  name    String   @db.VarChar(255)
  type    ZoneType
  color   String   @db.VarChar(50)
  icon    String   @db.VarChar(255)
  cords   Json
  environment Environment @relation(fields: [envId], references: [id])
  pois    POI[]
}

model POI {
  id          Int      @id @default(autoincrement())
  zoneId      Int
  name        String   @db.VarChar(50)
  category    POICategory
  description String   @db.VarChar(255)
  location    Json
  zone        Zone     @relation(fields: [zoneId], references: [id])
}

model Obstacle {
  id          Int      @id @default(autoincrement())
  envId       Int
  name        String   @db.VarChar(50)
  description String   @db.VarChar(255)
  cords       Json
  environment Environment @relation(fields: [envId], references: [id])
}

model Itinerary {
  id         Int      @id @default(autoincrement())
  startPoint Json
  endPoint   Json
  envId     Int
  environement       Environment  @relation(fields: [envId], references: [id])
}

model HelpRequest {
  id       Int      @id @default(autoincrement())
  userId   Int
  helperId Int
  user     EndUser  @relation(fields: [userId], references: [id])
  helper   Helper   @relation(fields: [helperId], references: [id])
}

model Sale {
  id       Int      @id @default(autoincrement())
  deviceId Int
  buyerId  Int
  device   Device   @relation(fields: [deviceId], references: [id])
  buyer    EndUser   @relation(fields: [buyerId], references: [userId])
  createdAt     DateTime @default(now())
}

model Intervention {
  id           Int      @id @default(autoincrement())
  type         InterventionType
  deviceId     Int
  maintainerId Int
  isRemote     Boolean
  planDate     DateTime
  device       Device   @relation(fields: [deviceId], references: [id])
  maintainer   Maintainer @relation(fields: [maintainerId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  details   String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
}


model KPI{
    id      Int @id @default(autoincrement())
    name    String @unique // par example "monthly_sales" , "device_usage"
    value   Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// Enums
enum Role {
  super
  normal
}

enum DeviceType {
  Ceinture
  Canne_Augmenté
  Lunnettes_Connectées
}

enum DeviceStatus {
  connected
  disconnected
  under_maintenance
  en_panne
}

enum ZoneType {
  Zone_de_circulation
  Zone_de_travail
  Zone_de_service
  Zone_interdite
  Zone_danger
}

enum POICategory {
  acceuil
  bureau
  sortie
}

enum InterventionType {
  preventive
  curative
}